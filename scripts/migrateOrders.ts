import { db } from '../src/firebase';
import { collection, getDocs, updateDoc, doc } from 'firebase/firestore';
import { convertOldCartItem } from '../src/types';

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –Ω–æ–≤—É—é
 * –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: items = [Product] (–≥–¥–µ Product —Å–æ–¥–µ—Ä–∂–∏—Ç quantity)
 * –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: items = [{ product: Product, quantity: number }]
 */

const migrateOrders = async () => {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    const ordersSnapshot = await getDocs(collection(db, 'orders'));
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersSnapshot.size}`);
    
    let migratedCount = 0;
    let skippedCount = 0;
    
    for (const orderDoc of ordersSnapshot.docs) {
      const orderData = orderDoc.data();
      const orderId = orderDoc.id;
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ ${orderId}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
      const needsMigration = orderData.items && Array.isArray(orderData.items) && 
        orderData.items.length > 0 && 
        orderData.items[0] && 
        typeof orderData.items[0] === 'object' && 
        !orderData.items[0].product && 
        orderData.items[0].id; // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è product, –Ω–æ –µ—Å—Ç—å id, –∑–Ω–∞—á–∏—Ç —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      
      if (needsMigration) {
        console.log(`üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ ${orderId}...`);
        console.log(`üìã –°—Ç–∞—Ä—ã–µ items:`, orderData.items);
        
        try {
          // –ú–∏–≥—Ä–∏—Ä—É–µ–º items
          const migratedItems = orderData.items.map((oldItem: any) => {
            console.log(`üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º item:`, oldItem);
            return convertOldCartItem(oldItem);
          });
          
          console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ items:`, migratedItems);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
          await updateDoc(doc(db, 'orders', orderId), {
            items: migratedItems
          });
          
          console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
          migratedCount++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
          console.error(`üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:`, orderData);
        }
      } else {
        console.log(`‚è≠Ô∏è –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        skippedCount++;
      }
    }
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${migratedCount}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${skippedCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${migratedCount + skippedCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateOrders(); 